const WebSocket = require("ws")
const { v4: uuidv4 } = require("uuid")

console.log("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ WebSocketHandler –º–æ–¥—É–ª—è...")

class WebSocketHandler {
  constructor(wss, database, gameEngine) {
    console.log("üîå –°–æ–∑–¥–∞–Ω–∏–µ WebSocketHandler...")

    this.wss = wss
    this.db = database
    this.gameEngine = gameEngine
    this.users = new Map() // ws -> user data
    this.rooms = new Map() // roomId -> room data
    this.usersByNickname = new Map() // nickname -> ws

    this.setupWebSocket()

    console.log("‚úÖ WebSocketHandler —Å–æ–∑–¥–∞–Ω")
  }

  setupWebSocket() {
    console.log("üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞...")

    this.wss.on("connection", (ws, req) => {
      const clientIP = req.socket.remoteAddress || req.connection.remoteAddress
      const userAgent = req.headers["user-agent"]
      const origin = req.headers.origin

      console.log("üéâ –ù–û–í–û–ï WEBSOCKET –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï!")
      console.log("=" * 80)
      console.log(`üåê IP: ${clientIP}`)
      console.log(`üîß User-Agent: ${userAgent}`)
      console.log(`üè† Origin: ${origin}`)
      console.log(`üìä –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${this.wss.clients.size}`)
      console.log(`üïê –í—Ä–µ–º—è: ${new Date().toISOString()}`)
      console.log("=" * 80)

      ws.on("message", async (message) => {
        try {
          console.log(`üì® RAW MESSAGE –æ—Ç ${clientIP}:`, message.toString())
          const data = JSON.parse(message)
          console.log(`üì® PARSED MESSAGE –æ—Ç ${clientIP}:`, JSON.stringify(data, null, 2))
          await this.handleMessage(ws, data)
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${clientIP}:`, error)
          this.sendError(ws, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        }
      })

      ws.on("close", (code, reason) => {
        console.log(`üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –æ—Ç ${clientIP}`)
        console.log(`üìä –ö–æ–¥: ${code}, –ü—Ä–∏—á–∏–Ω–∞: ${reason}`)
        this.handleDisconnect(ws)
      })

      ws.on("error", (error) => {
        console.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞ –æ—Ç ${clientIP}:`, error)
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      const welcomeMessage = {
        type: "connected",
        message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mafia Game!",
        serverTime: new Date().toISOString(),
      }

      this.send(ws, welcomeMessage)
      console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${clientIP}`)
    })

    console.log("‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
  }

  async handleMessage(ws, data) {
    console.log(`üì® –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ${data.type}`)

    try {
      switch (data.type) {
        case "ping":
          console.log(`üèì Ping –ø–æ–ª—É—á–µ–Ω`)
          this.send(ws, { type: "pong", timestamp: new Date().toISOString() })
          break

        default:
          console.log("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", data.type)
          this.sendError(ws, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${data.type}`)
      }
    } catch (error) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò ${data.type}:`, error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    }
  }

  handleDisconnect(ws) {
    console.log("üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
  }

  send(ws, data) {
    if (ws.readyState === WebSocket.OPEN) {
      const message = JSON.stringify(data)
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${data.type} –∫–ª–∏–µ–Ω—Ç—É`)
      ws.send(message)
    } else {
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${data.type} –∫–ª–∏–µ–Ω—Ç—É —Å –∑–∞–∫—Ä—ã—Ç—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º`)
    }
  }

  sendError(ws, message) {
    console.log(`‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: ${message}`)
    this.send(ws, {
      type: "error",
      message: message,
    })
  }

  getStats() {
    return {
      connectedUsers: this.users.size,
      activeRooms: this.rooms.size,
    }
  }
}

console.log("‚úÖ WebSocketHandler –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
module.exports = WebSocketHandler
