const WebSocket = require("ws")
const { v4: uuidv4 } = require("uuid")
const crypto = require("crypto")

console.log("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ WebSocketHandler –º–æ–¥—É–ª—è...")

class WebSocketHandler {
  constructor(wss, database, gameEngine) {
    console.log("üîå –°–æ–∑–¥–∞–Ω–∏–µ WebSocketHandler...")

    this.wss = wss
    this.db = database
    this.gameEngine = gameEngine
    this.users = new Map() // ws -> user data
    this.rooms = new Map() // roomId -> room data
    this.usersByNickname = new Map() // nickname -> ws
    this.deviceSessions = new Map() // deviceId -> { nickname, sessionId }

    // –°–≤—è–∑—ã–≤–∞–µ–º GameEngine —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏ –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    if (this.gameEngine) {
      this.gameEngine.setRooms(this.rooms)
      this.gameEngine.setDatabase(this.db)
    }

    this.setupWebSocket()

    console.log("‚úÖ WebSocketHandler —Å–æ–∑–¥–∞–Ω")
  }

  setupWebSocket() {
    console.log("üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞...")

    this.wss.on("connection", (ws, req) => {
      const clientIP = req.socket.remoteAddress || req.connection.remoteAddress
      const userAgent = req.headers["user-agent"]
      const origin = req.headers.origin

      console.log("üéâ –ù–û–í–û–ï WEBSOCKET –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï!")
      console.log("=" * 80)
      console.log(`üåê IP: ${clientIP}`)
      console.log(`üîß User-Agent: ${userAgent}`)
      console.log(`üè† Origin: ${origin}`)
      console.log(`üìä –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${this.wss.clients.size}`)
      console.log(`üïê –í—Ä–µ–º—è: ${new Date().toISOString()}`)
      console.log("=" * 80)

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
      this.users.set(ws, {
        isAuthenticated: false,
        nickname: null,
        currentRoom: null,
        deviceId: null,
        sessionId: null,
      })

      ws.on("message", async (message) => {
        try {
          console.log(`üì® RAW MESSAGE –æ—Ç ${clientIP}:`, message.toString())
          const data = JSON.parse(message)
          console.log(`üì® PARSED MESSAGE –æ—Ç ${clientIP}:`, JSON.stringify(data, null, 2))
          await this.handleMessage(ws, data)
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${clientIP}:`, error)
          this.sendError(ws, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        }
      })

      ws.on("close", (code, reason) => {
        console.log(`üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –æ—Ç ${clientIP}`)
        console.log(`üìä –ö–æ–¥: ${code}, –ü—Ä–∏—á–∏–Ω–∞: ${reason}`)
        this.handleDisconnect(ws)
      })

      ws.on("error", (error) => {
        console.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞ –æ—Ç ${clientIP}:`, error)
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      const welcomeMessage = {
        type: "connected",
        message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mafia Game!",
        serverTime: new Date().toISOString(),
      }

      this.send(ws, welcomeMessage)
      console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${clientIP}`)
    })

    console.log("‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä
    this.startGameUpdateLoop()
  }

  startGameUpdateLoop() {
    setInterval(() => {
      for (const [roomId, room] of this.rooms.entries()) {
        if (room.game && room.status === "playing") {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
          this.broadcastToRoom(roomId, {
            type: "gameUpdate",
            game: {
              phase: room.game.phase,
              day: room.game.day,
              timeLeft: room.game.timeLeft,
              lastAction: room.game.lastAction,
              votingResults: room.game.votingResults,
            },
          })
        }
      }
    }, 1000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  }

  generateDeviceId(userAgent, ip) {
    return crypto
      .createHash("sha256")
      .update(userAgent + ip)
      .digest("hex")
      .substring(0, 16)
  }

  async handleMessage(ws, data) {
    const user = this.users.get(ws)
    const userInfo = user && user.isAuthenticated ? `${user.nickname} (auth)` : "unknown"

    console.log(`üì® –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ${data.type} –æ—Ç ${userInfo}`)

    try {
      switch (data.type) {
        case "register":
          await this.handleRegister(ws, data)
          break
        case "login":
          await this.handleLogin(ws, data)
          break
        case "getRooms":
          await this.sendRoomsList(ws)
          break
        case "createRoom":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.createRoom(ws, data.room)
          break
        case "joinRoom":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.joinRoom(ws, data.roomId, data.password)
          break
        case "leaveRoom":
          await this.leaveRoom(ws)
          break
        case "chatMessage":
          await this.handleChatMessage(ws, data)
          break
        case "gameAction":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.handleGameAction(ws, data)
          break
        case "updateAvatar":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.updateAvatar(ws, data.avatar)
          break
        case "buyEffect":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.buyEffect(ws, data.effect)
          break
        case "adminAction":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.handleAdminAction(ws, data)
          break
        case "startGame":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.startGame(ws)
          break
        case "addBot":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.addBot(ws, data)
          break
        case "removeBot":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.removeBot(ws, data)
          break
        case "forceEndGame":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.forceEndGame(ws, data)
          break
        case "ping":
          this.send(ws, { type: "pong", timestamp: new Date().toISOString() })
          break
        case "getStats":
          await this.sendLobbyStats(ws)
          break
        case "rejoinRoom":
          await this.rejoinRoom(ws, data.roomId)
          break
        case "getUserProfile":
          if (!user || !user.isAuthenticated) {
            return this.sendError(ws, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
          }
          await this.getUserProfile(ws, data.nickname)
          break
        default:
          this.sendError(ws, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${data.type}`)
      }
    } catch (error) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò ${data.type} –æ—Ç ${userInfo}:`, error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + error.message)
    }
  }

  async handleRegister(ws, data) {
    try {
      const { nickname, password, avatar } = data

      if (!nickname || !password) {
        return this.sendError(ws, "–ù–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
      }

      if (nickname.length < 3 || nickname.length > 20) {
        return this.sendError(ws, "–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤")
      }

      if (password.length < 4) {
        return this.sendError(ws, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞")
      }

      const user = await this.db.createUser({ nickname, password, avatar })

      this.send(ws, {
        type: "registerSuccess",
        message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.",
      })

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${nickname} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error)
      this.sendError(ws, error.message)
    }
  }

  async handleLogin(ws, data) {
    try {
      const { nickname, password, deviceId } = data

      if (!nickname || !password) {
        return this.sendError(ws, "–ù–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
      }

      const user = await this.db.loginUser(nickname, password)

      if (!user) {
        return this.sendError(ws, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º deviceId
      const finalDeviceId = deviceId || this.generateDeviceId(data.userAgent || "unknown", data.ip || "unknown")

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏
      const existingSession = this.deviceSessions.get(finalDeviceId)
      if (existingSession && existingSession.nickname === nickname) {
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è ${nickname} —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${finalDeviceId}`)
      }

      // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingWs = this.usersByNickname.get(nickname)
      if (existingWs && existingWs !== ws) {
        console.log(`üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${nickname}`)

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª
        const existingUser = this.users.get(existingWs)
        if (existingUser && existingUser.currentRoom) {
          await this.removePlayerFromRoom(existingUser.currentRoom, nickname)
        }

        this.users.delete(existingWs)
        this.usersByNickname.delete(nickname)

        try {
          existingWs.close()
        } catch (e) {
          console.log("–°—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ")
        }
      }

      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const sessionId = uuidv4()
      this.deviceSessions.set(finalDeviceId, { nickname, sessionId })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = {
        ...user,
        currentRoom: null,
        isAuthenticated: true,
        deviceId: finalDeviceId,
        sessionId: sessionId,
      }

      this.users.set(ws, userData)
      this.usersByNickname.set(nickname, ws)

      const loginResponse = {
        type: "loginSuccess",
        user: {
          nickname: user.nickname,
          avatar: user.avatar,
          coins: user.coins,
          nickname_effects: user.nickname_effects,
          games_played: user.games_played,
          games_won: user.games_won,
          games_survived: user.games_survived,
          is_admin: user.is_admin,
        },
        deviceId: finalDeviceId,
        sessionId: sessionId,
      }

      this.send(ws, loginResponse)
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${nickname}`)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
    }
  }

  async removePlayerFromRoom(roomId, nickname) {
    const room = this.rooms.get(roomId)
    if (!room) return

    const playerIndex = room.players.findIndex((p) => p.nickname === nickname)
    if (playerIndex !== -1) {
      room.players.splice(playerIndex, 1)
      console.log(`üóëÔ∏è –ò–≥—Ä–æ–∫ ${nickname} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${room.name}`)

      // –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
      this.cancelAutoStart(room)

      // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
      if (room.players.length === 0) {
        this.rooms.delete(roomId)
        await this.db.deleteRoom(roomId)
        console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${room.name} —É–¥–∞–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)`)
      } else {
        // –ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å —É—à—ë–ª, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ
        if (room.creator === nickname && room.players.length > 0) {
          room.creator = room.players[0].nickname
          room.players[0].isCreator = true
          console.log(`üëë –ù–æ–≤—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã: ${room.creator}`)
        }

        this.broadcastToRoom(roomId, {
          type: "roomUpdated",
          room: this.sanitizeRoomForClient(room),
        })

        this.broadcastToRoom(roomId, {
          type: "chatMessage",
          sender: "–°–∏—Å—Ç–µ–º–∞",
          message: `${nickname} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`,
          timestamp: new Date().toISOString(),
        })
      }

      await this.broadcastRoomsList()
    }
  }

  async createRoom(ws, roomData) {
    const user = this.users.get(ws)

    if (user.currentRoom) {
      return this.sendError(ws, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ")
    }

    try {
      const roomId = uuidv4()
      const room = {
        id: roomId,
        name: roomData.name,
        status: "waiting",
        minPlayers: roomData.minPlayers || 4,
        maxPlayers: roomData.maxPlayers || 10,
        creator: user.nickname,
        password: roomData.password || null,
        players: [
          {
            nickname: user.nickname,
            avatar: user.avatar,
            isCreator: true,
            role: null,
            isAlive: true,
          },
        ],
        roles: roomData.roles || { doctor: true, don: true, lovers: false },
        messages: [],
        game: null,
        createdAt: new Date().toISOString(),
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –∏ –ë–î
      this.rooms.set(roomId, room)
      await this.db.createRoom({
        id: roomId,
        name: roomData.name,
        creator: user,
        minPlayers: room.minPlayers,
        maxPlayers: room.maxPlayers,
        roles: room.roles,
        password: roomData.password,
      })

      user.currentRoom = roomId

      this.send(ws, {
        type: "roomJoined",
        room: this.sanitizeRoomForClient(room, user.nickname),
      })

      await this.broadcastRoomsList()

      console.log(`üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomData.name} (${roomId}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.nickname}`)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã")
    }
  }

  async joinRoom(ws, roomId, password = null) {
    const user = this.users.get(ws)

    if (user.currentRoom) {
      return this.sendError(ws, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ")
    }

    try {
      const room = this.rooms.get(roomId)
      if (!room) {
        return this.sendError(ws, "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      if (room.password && room.password !== password) {
        return this.sendError(ws, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
      }

      if (room.players.length >= room.maxPlayers) {
        return this.sendError(ws, "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
      }

      if (room.status !== "waiting") {
        return this.sendError(ws, "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å")
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
      if (room.players.find((p) => p.nickname === user.nickname)) {
        return this.sendError(ws, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ")
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
      room.players.push({
        nickname: user.nickname,
        avatar: user.avatar,
        isCreator: false,
        role: null,
        isAlive: true,
      })

      user.currentRoom = roomId

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç
      this.checkAutoStart(room)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
      this.send(ws, {
        type: "roomJoined",
        room: this.sanitizeRoomForClient(room, user.nickname),
      })

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
      this.broadcastToRoom(roomId, {
        type: "roomUpdated",
        room: this.sanitizeRoomForClient(room),
      })

      this.broadcastToRoom(roomId, {
        type: "chatMessage",
        sender: "–°–∏—Å—Ç–µ–º–∞",
        message: `${user.nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ`,
        timestamp: new Date().toISOString(),
      })

      await this.broadcastRoomsList()

      console.log(`üë§ ${user.nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ")
    }
  }

  async leaveRoom(ws) {
    const user = this.users.get(ws)
    if (!user || !user.currentRoom) {
      return
    }

    const roomId = user.currentRoom
    await this.removePlayerFromRoom(roomId, user.nickname)
    user.currentRoom = null

    // –û—á–∏—â–∞–µ–º —á–∞—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    this.send(ws, {
      type: "clearChat",
    })

    console.log(`üë§ ${user.nickname} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`)
  }

  async handleChatMessage(ws, data) {
    const user = this.users.get(ws)
    if (!user || !user.currentRoom) {
      return this.sendError(ws, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ")
    }

    const room = this.rooms.get(user.currentRoom)
    if (!room) {
      return this.sendError(ws, "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }

    const message = {
      sender: user.nickname,
      message: data.message,
      timestamp: new Date().toISOString(),
    }

    room.messages.push(message)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await this.db.saveMessage({
      roomId: user.currentRoom,
      sender: user.nickname,
      message: data.message,
      timestamp: message.timestamp,
    })

    this.broadcastToRoom(user.currentRoom, {
      type: "chatMessage",
      ...message,
    })

    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.name}: ${user.nickname}: ${data.message}`)
  }

  async updateAvatar(ws, avatar) {
    const user = this.users.get(ws)

    try {
      await this.db.updateUserAvatar(user.nickname, avatar)
      user.avatar = avatar

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –∫–æ–º–Ω–∞—Ç–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–µ–π
      if (user.currentRoom) {
        const room = this.rooms.get(user.currentRoom)
        if (room) {
          const player = room.players.find((p) => p.nickname === user.nickname)
          if (player) {
            player.avatar = avatar
            this.broadcastToRoom(user.currentRoom, {
              type: "roomUpdated",
              room: this.sanitizeRoomForClient(room),
            })
          }
        }
      }

      this.send(ws, {
        type: "avatarUpdated",
        avatar: avatar,
      })
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞")
    }
  }

  async buyEffect(ws, effect) {
    const user = this.users.get(ws)

    const effectPrices = {
      rainbow: 50,
      glow: 30,
      shake: 25,
      bounce: 20,
      fade: 15,
      fire: 75,
      ice: 70,
      electric: 80,
      matrix: 65,
      neon: 85,
      gold: 100,
      shadow: 45,
      wave: 40,
      flip: 55,
      zoom: 35,
      bg_stars: 120,
      bg_gradient: 100,
      bg_pulse: 90,
    }

    const price = effectPrices[effect]
    if (!price) {
      return this.sendError(ws, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç")
    }

    if (user.coins < price) {
      return this.sendError(ws, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç")
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç
      if (user.nickname_effects && user.nickname_effects.includes(effect)) {
        return this.sendError(ws, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç")
      }

      // –ü–æ–∫—É–ø–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
      await this.db.updateUserCoins(user.nickname, -price)
      if (!user.nickname_effects) user.nickname_effects = []
      user.nickname_effects.push(effect)
      await this.db.updateUserNicknameEffects(user.nickname, user.nickname_effects)
      user.coins -= price

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.send(ws, {
        type: "userUpdated",
        user: {
          nickname: user.nickname,
          avatar: user.avatar,
          coins: user.coins,
          nickname_effects: user.nickname_effects,
          games_played: user.games_played,
          games_won: user.games_won,
          games_survived: user.games_survived,
          is_admin: user.is_admin,
        },
      })

      this.send(ws, {
        type: "effectBought",
        effect: effect,
        coins: user.coins,
        nickname_effects: user.nickname_effects,
        message: `–≠—Ñ—Ñ–µ–∫—Ç "${effect}" —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!`,
      })
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞")
    }
  }

  async handleAdminAction(ws, data) {
    const user = this.users.get(ws)
    if (!user || !user.is_admin) {
      return this.sendError(ws, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    }

    try {
      switch (data.action) {
        case "giveCoins":
          const targetUser = await this.db.getUser(data.target)
          if (!targetUser) {
            return this.sendError(ws, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
          }

          await this.db.adminUpdateUserCoins(user.nickname, data.target, data.amount)

          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
          const targetWs = this.usersByNickname.get(data.target)
          if (targetWs) {
            const targetUserData = this.users.get(targetWs)
            if (targetUserData) {
              targetUserData.coins += data.amount
              this.send(targetWs, {
                type: "userUpdated",
                user: {
                  nickname: targetUserData.nickname,
                  avatar: targetUserData.avatar,
                  coins: targetUserData.coins,
                  nickname_effects: targetUserData.nickname_effects,
                  games_played: targetUserData.games_played,
                  games_won: targetUserData.games_won,
                  games_survived: targetUserData.games_survived,
                  is_admin: targetUserData.is_admin,
                },
              })
            }
          }

          this.send(ws, {
            type: "adminActionSuccess",
            message: `–í—ã–¥–∞–Ω–æ ${data.amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${data.target}`,
          })
          break

        case "giveEffect":
          const targetUser2 = await this.db.getUser(data.target)
          if (!targetUser2) {
            return this.sendError(ws, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
          }

          const effects = targetUser2.nickname_effects || []
          if (!effects.includes(data.effect)) {
            effects.push(data.effect)
            await this.db.adminUpdateUserEffects(user.nickname, data.target, effects)

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
            const targetWs2 = this.usersByNickname.get(data.target)
            if (targetWs2) {
              const targetUserData2 = this.users.get(targetWs2)
              if (targetUserData2) {
                targetUserData2.nickname_effects = effects
                this.send(targetWs2, {
                  type: "userUpdated",
                  user: {
                    nickname: targetUserData2.nickname,
                    avatar: targetUserData2.avatar,
                    coins: targetUserData2.coins,
                    nickname_effects: targetUserData2.nickname_effects,
                    games_played: targetUserData2.games_played,
                    games_won: targetUserData2.games_won,
                    games_survived: targetUserData2.games_survived,
                    is_admin: targetUserData2.is_admin,
                  },
                })
              }
            }
          }

          this.send(ws, {
            type: "adminActionSuccess",
            message: `–í—ã–¥–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç ${data.effect} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${data.target}`,
          })
          break

        case "removeEffect":
          const targetUser3 = await this.db.getUser(data.target)
          if (targetUser3) {
            const effects3 = targetUser3.nickname_effects || []
            const newEffects = effects3.filter((e) => e !== data.effect)
            await this.db.adminUpdateUserEffects(user.nickname, data.target, newEffects)
          }
          this.send(ws, {
            type: "adminActionSuccess",
            message: `–£–¥–∞–ª—ë–Ω —ç—Ñ—Ñ–µ–∫—Ç ${data.effect} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.target}`,
          })
          break

        default:
          this.sendError(ws, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
    }
  }

  async startGame(ws) {
    const user = this.users.get(ws)
    if (!user || !user.currentRoom) {
      return this.sendError(ws, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ")
    }

    const room = this.rooms.get(user.currentRoom)
    if (!room) {
      return this.sendError(ws, "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    if (room.creator !== user.nickname) {
      return this.sendError(ws, "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    if (room.players.length < room.minPlayers) {
      return this.sendError(ws, `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤. –ú–∏–Ω–∏–º—É–º: ${room.minPlayers}`)
    }

    try {
      console.log(`üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`)

      // –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç –µ—Å–ª–∏ –æ–Ω –±—ã–ª
      this.cancelAutoStart(room)

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
      if (this.gameEngine) {
        console.log(`üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ–º GameEngine –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã`)
        const game = await this.gameEngine.startGame(room, this.db)
        console.log(`üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:`, game)
      } else {
        console.log(`üéÆ GameEngine –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É`)
        // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        room.status = "playing"
        room.game = {
          phase: "night",
          day: 1,
          timeLeft: 60, // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –Ω–æ—á—å
          votingResults: null,
          lastAction: "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å...",
        }

        // –†–∞–∑–¥–∞—ë–º —Ä–æ–ª–∏
        this.assignRoles(room)
        await this.db.updateRoomStatus(room.id, "playing")
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –µ–≥–æ —Ä–æ–ª—å
      for (const player of room.players) {
        const playerWs = this.usersByNickname.get(player.nickname)
        if (playerWs) {
          this.send(playerWs, {
            type: "roleAssigned",
            role: player.role,
            mafiaMembers:
              player.role === "mafia" || player.role === "don"
                ? room.players.filter((p) => p.role === "mafia" || p.role === "don").map((p) => p.nickname)
                : null,
          })
        }
      }

      this.broadcastToRoom(user.currentRoom, {
        type: "gameStarted",
        room: this.sanitizeRoomForClient(room),
      })

      this.broadcastToRoom(user.currentRoom, {
        type: "chatMessage",
        sender: "–°–∏—Å—Ç–µ–º–∞",
        message: "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã. –£–¥–∞—á–∏!",
        timestamp: new Date().toISOString(),
      })

      await this.broadcastRoomsList()

      console.log(`üéÆ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: " + error.message)
    }
  }

  assignRoles(room) {
    const players = [...room.players]
    const roles = []
    const playerCount = players.length

    console.log(`üé≠ –†–∞–∑–¥–∞—á–∞ —Ä–æ–ª–µ–π –¥–ª—è ${playerCount} –∏–≥—Ä–æ–∫–æ–≤`)

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–æ–ª–∏
    roles.push("don") // –î–æ–Ω –º–∞—Ñ–∏–∏

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ñ–∏—é (1/3 –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤, –º–∏–Ω–∏–º—É–º 1)
    const mafiaCount = Math.max(1, Math.floor(playerCount / 3))
    for (let i = 1; i < mafiaCount; i++) {
      roles.push("mafia")
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—Ç–æ—Ä–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤
    if (room.roles.doctor && playerCount >= 5) {
      roles.push("doctor")
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª—é–±–ª—ë–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤
    if (room.roles.lovers && playerCount >= 6) {
      roles.push("lover1", "lover2")
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∏—Ä–Ω—ã–º–∏ –∂–∏—Ç–µ–ª—è–º–∏
    while (roles.length < playerCount) {
      roles.push("citizen")
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–æ–ª–∏
    for (let i = roles.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[roles[i], roles[j]] = [roles[j], roles[i]]
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
    players.forEach((player, index) => {
      player.role = roles[index]
      player.isAlive = true
    })

    console.log(
      `üé≠ –†–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã:`,
      players.map((p) => `${p.nickname}: ${p.role}`),
    )
  }

  checkAutoStart(room) {
    if (room.status !== "waiting" || room.autoStartTimer) {
      return // –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –∏–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω
    }

    const playerCount = room.players.length
    let autoStartDelay = null

    // –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ - 3 —Å–µ–∫—É–Ω–¥—ã
    if (playerCount >= room.maxPlayers) {
      autoStartDelay = 3
    }
    // –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ –º–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ - 16 —Å–µ–∫—É–Ω–¥
    else if (playerCount >= room.minPlayers) {
      autoStartDelay = 16
    }

    if (autoStartDelay) {
      console.log(`‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${room.name} —á–µ—Ä–µ–∑ ${autoStartDelay} —Å–µ–∫—É–Ω–¥`)

      room.autoStartTimer = autoStartDelay
      room.autoStartInterval = setInterval(() => {
        room.autoStartTimer--

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        this.broadcastToRoom(room.id, {
          type: "autoStartTimer",
          timeLeft: room.autoStartTimer,
          reason: playerCount >= room.maxPlayers ? "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞" : "–ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω",
        })

        if (room.autoStartTimer <= 0) {
          this.executeAutoStart(room)
        }
      }, 1000)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞
      this.broadcastToRoom(room.id, {
        type: "autoStartTimer",
        timeLeft: room.autoStartTimer,
        reason: playerCount >= room.maxPlayers ? "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞" : "–ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω",
      })

      this.broadcastToRoom(room.id, {
        type: "chatMessage",
        sender: "–°–∏—Å—Ç–µ–º–∞",
        message: `‚è∞ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ ${autoStartDelay} —Å–µ–∫—É–Ω–¥! ${playerCount >= room.maxPlayers ? "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞" : "–ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω"}`,
        timestamp: new Date().toISOString(),
      })
    }
  }

  cancelAutoStart(room) {
    if (room.autoStartTimer && room.autoStartInterval) {
      console.log(`‚ùå –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${room.name}`)

      clearInterval(room.autoStartInterval)
      room.autoStartTimer = null
      room.autoStartInterval = null

      this.broadcastToRoom(room.id, {
        type: "autoStartCancelled",
      })

      this.broadcastToRoom(room.id, {
        type: "chatMessage",
        sender: "–°–∏—Å—Ç–µ–º–∞",
        message: "‚ùå –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω",
        timestamp: new Date().toISOString(),
      })
    }
  }

  async executeAutoStart(room) {
    console.log(`üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${room.name}`)

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    clearInterval(room.autoStartInterval)
    room.autoStartTimer = null
    room.autoStartInterval = null

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
      if (this.gameEngine) {
        console.log(`üéÆ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º GameEngine`)
        const game = await this.gameEngine.startGame(room, this.db)
        console.log(`üéÆ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç: –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞`)
      } else {
        console.log(`üéÆ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É`)
        room.status = "playing"
        room.game = {
          phase: "night",
          day: 1,
          timeLeft: 60,
          votingResults: null,
          lastAction: "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å...",
        }

        this.assignRoles(room)
        await this.db.updateRoomStatus(room.id, "playing")
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –µ–≥–æ —Ä–æ–ª—å
      for (const player of room.players) {
        const playerWs = this.usersByNickname.get(player.nickname)
        if (playerWs) {
          this.send(playerWs, {
            type: "roleAssigned",
            role: player.role,
            mafiaMembers:
              player.role === "mafia" || player.role === "don"
                ? room.players.filter((p) => p.role === "mafia" || p.role === "don").map((p) => p.nickname)
                : null,
          })
        }
      }

      this.broadcastToRoom(room.id, {
        type: "gameStarted",
        room: this.sanitizeRoomForClient(room),
      })

      this.broadcastToRoom(room.id, {
        type: "chatMessage",
        sender: "–°–∏—Å—Ç–µ–º–∞",
        message: "üöÄ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! –†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã. –£–¥–∞—á–∏!",
        timestamp: new Date().toISOString(),
      })

      await this.broadcastRoomsList()

      console.log(`üéÆ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç: –∏–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.name}`)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞:", error)

      this.broadcastToRoom(room.id, {
        type: "chatMessage",
        sender: "–°–∏—Å—Ç–µ–º–∞",
        message: "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã",
        timestamp: new Date().toISOString(),
      })
    }
  }

  async handleGameAction(ws, data) {
    const user = this.users.get(ws)
    if (!user || !user.currentRoom) {
      return this.sendError(ws, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ")
    }

    const room = this.rooms.get(user.currentRoom)
    if (!room || !room.game) {
      return this.sendError(ws, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }

    console.log(`üéÆ –ò–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç ${user.nickname}:`, data.action)

    try {
      // –ü–µ—Ä–µ–¥–∞—ë–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
      if (this.gameEngine) {
        await this.gameEngine.handleAction(room, user.nickname, data.action.action, data.action.target)
      } else {
        // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –¥–≤–∏–∂–∫–∞
        this.send(ws, {
          type: "actionReceived",
          message: `–î–µ–π—Å—Ç–≤–∏–µ "${data.action.action}" –ø—Ä–∏–Ω—è—Ç–æ`,
        })
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –≤—Å–µ—Ö
      this.broadcastToRoom(user.currentRoom, {
        type: "gameUpdate",
        game: {
          phase: room.game.phase,
          day: room.game.day,
          timeLeft: room.game.timeLeft,
          lastAction: room.game.lastAction,
          votingResults: room.game.votingResults,
        },
      })
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è")
    }
  }

  async addBot(ws, data) {
    const user = this.users.get(ws)
    if (!user || !user.is_admin) {
      return this.sendError(ws, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    }

    if (!user.currentRoom) {
      return this.sendError(ws, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ")
    }

    const room = this.rooms.get(user.currentRoom)
    if (!room) {
      return this.sendError(ws, "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }

    if (room.players.length >= room.maxPlayers) {
      return this.sendError(ws, "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
    }

    const botName = data.botName || `–ë–æ—Ç${Date.now()}`
    const botAvatar = data.botAvatar || "ü§ñ"

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if (room.players.find((p) => p.nickname === botName)) {
      return this.sendError(ws, "–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞
    room.players.push({
      nickname: botName,
      avatar: botAvatar,
      isCreator: false,
      role: null,
      isAlive: true,
      isBot: true,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç
    this.checkAutoStart(room)

    this.broadcastToRoom(user.currentRoom, {
      type: "roomUpdated",
      room: this.sanitizeRoomForClient(room),
    })

    this.broadcastToRoom(user.currentRoom, {
      type: "chatMessage",
      sender: "–°–∏—Å—Ç–µ–º–∞",
      message: `ü§ñ –ë–æ—Ç ${botName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É`,
      timestamp: new Date().toISOString(),
    })

    this.send(ws, {
      type: "botAdded",
      botName: botName,
    })

    console.log(`ü§ñ –ê–¥–º–∏–Ω ${user.nickname} –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞ ${botName}`)
  }

  async removeBot(ws, data) {
    const user = this.users.get(ws)
    if (!user || !user.is_admin) {
      return this.sendError(ws, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    }

    if (!user.currentRoom) {
      return this.sendError(ws, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ")
    }

    const room = this.rooms.get(user.currentRoom)
    if (!room) {
      return this.sendError(ws, "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }

    const botIndex = room.players.findIndex((p) => p.nickname === data.botName && p.isBot)
    if (botIndex === -1) {
      return this.sendError(ws, "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    room.players.splice(botIndex, 1)

    // –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
    this.cancelAutoStart(room)

    this.broadcastToRoom(user.currentRoom, {
      type: "roomUpdated",
      room: this.sanitizeRoomForClient(room),
    })

    this.broadcastToRoom(user.currentRoom, {
      type: "chatMessage",
      sender: "–°–∏—Å—Ç–µ–º–∞",
      message: `ü§ñ –ë–æ—Ç ${data.botName} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã`,
      timestamp: new Date().toISOString(),
    })

    this.send(ws, {
      type: "adminActionSuccess",
      message: `–ë–æ—Ç ${data.botName} —É–¥–∞–ª—ë–Ω`,
    })

    console.log(`üóëÔ∏è –ê–¥–º–∏–Ω ${user.nickname} —É–¥–∞–ª–∏–ª –±–æ—Ç–∞ ${data.botName}`)
  }

  async forceEndGame(ws, data) {
    const user = this.users.get(ws)
    if (!user || !user.is_admin) {
      return this.sendError(ws, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    }

    const room = this.rooms.get(data.roomId || user.currentRoom)
    if (!room) {
      return this.sendError(ws, "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    }

    if (room.game) {
      room.status = "waiting"
      room.game = null

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–æ–ª–∏
      room.players.forEach((player) => {
        player.role = null
        player.isAlive = true
      })

      await this.db.updateRoomStatus(room.id, "waiting")

      this.broadcastToRoom(room.id, {
        type: "gameEnded",
        room: this.sanitizeRoomForClient(room),
      })

      this.broadcastToRoom(room.id, {
        type: "chatMessage",
        sender: "–°–∏—Å—Ç–µ–º–∞",
        message: `üëë –ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`,
        timestamp: new Date().toISOString(),
      })
    }

    this.send(ws, {
      type: "adminActionSuccess",
      message: `–ò–≥—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`,
    })

    console.log(`üëë –ê–¥–º–∏–Ω ${user.nickname} –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.id}`)
  }

  async getUserProfile(ws, nickname) {
    try {
      const user = await this.db.getUser(nickname)
      if (!user) {
        return this.sendError(ws, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
      }

      this.send(ws, {
        type: "userProfile",
        profile: {
          nickname: user.nickname,
          avatar: user.avatar,
          coins: user.coins,
          nickname_effects: user.nickname_effects,
          games_played: user.games_played,
          games_won: user.games_won,
          games_survived: user.games_survived,
          is_admin: user.is_admin,
          created_at: user.created_at,
          last_login: user.last_login,
        },
      })
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    }
  }

  handleDisconnect(ws) {
    const user = this.users.get(ws)
    if (!user) {
      return
    }

    // –ù–ï –ø–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    // if (user.currentRoom) {
    //   this.leaveRoom(ws)
    // }

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–æ–≤
    this.users.delete(ws)
    if (user.nickname) {
      this.usersByNickname.delete(user.nickname)
    }

    console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${user.nickname || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"}`)
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  send(ws, data) {
    if (ws.readyState === WebSocket.OPEN) {
      const message = JSON.stringify(data)
      ws.send(message)
    }
  }

  sendError(ws, message) {
    this.send(ws, {
      type: "error",
      message: message,
    })
  }

  broadcastToRoom(roomId, message) {
    const room = this.rooms.get(roomId)
    if (!room) return

    for (const [ws, user] of this.users.entries()) {
      if (user.currentRoom === roomId) {
        this.send(ws, message)
      }
    }
  }

  async broadcastRoomsList() {
    const rooms = await this.db.getRooms()
    const roomsList = []

    for (const room of rooms) {
      const roomData = this.rooms.get(room.id)
      roomsList.push({
        id: room.id,
        name: room.name,
        status: room.status,
        players: roomData ? roomData.players.length : 0,
        maxPlayers: room.max_players,
        creator: room.creator_nickname,
        hasPassword: room.hasPassword,
        createdAt: room.created_at,
      })
    }

    for (const [ws, user] of this.users.entries()) {
      if (user.isAuthenticated && !user.currentRoom) {
        this.send(ws, {
          type: "rooms",
          rooms: roomsList,
        })
      }
    }
  }

  sanitizeRoomForClient(room, userNickname = null) {
    return {
      id: room.id,
      name: room.name,
      status: room.status,
      players: room.players.map((p) => ({
        nickname: p.nickname,
        avatar: p.avatar,
        isCreator: p.isCreator,
        isAlive: p.isAlive,
        isBot: p.isBot || false,
        role: p.nickname === userNickname || room.status === "finished" ? p.role : null,
      })),
      maxPlayers: room.maxPlayers,
      creator: room.creator,
      roles: room.roles,
      messages: room.messages.slice(-50),
      game: room.game
        ? {
            phase: room.game.phase,
            day: room.game.day,
            timeLeft: room.game.timeLeft,
            votingResults: room.game.votingResults,
            lastAction: room.game.lastAction,
          }
        : null,
    }
  }

  async sendRoomsList(ws) {
    try {
      const rooms = await this.db.getRooms()
      const roomsList = []

      for (const room of rooms) {
        const roomData = this.rooms.get(room.id)
        roomsList.push({
          id: room.id,
          name: room.name,
          status: room.status,
          players: roomData ? roomData.players.length : 0,
          maxPlayers: room.max_players,
          creator: room.creator_nickname,
          hasPassword: room.hasPassword,
          createdAt: room.created_at,
        })
      }

      this.send(ws, {
        type: "rooms",
        rooms: roomsList,
      })

      console.log(`üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç: ${roomsList.length} –∫–æ–º–Ω–∞—Ç`)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç")
    }
  }

  async sendLobbyStats(ws) {
    try {
      const dbStats = await this.db.getStats()
      const wsStats = this.getStats()
      const gameStats = this.gameEngine ? this.gameEngine.getGameStats() : { activeGames: 0 }

      this.send(ws, {
        type: "stats",
        stats: {
          onlineUsers: wsStats.connectedUsers,
          activeRooms: wsStats.activeRooms,
          activeGames: gameStats.activeGames,
          uptime: process.uptime(),
        },
      })
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    }
  }

  getStats() {
    return {
      connectedUsers: this.users.size,
      activeRooms: this.rooms.size,
      authenticatedUsers: Array.from(this.users.values()).filter((u) => u.isAuthenticated).length,
    }
  }

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  async rejoinRoom(ws, roomId) {
    this.sendError(ws, "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
  }
}

console.log("‚úÖ WebSocketHandler –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
module.exports = WebSocketHandler
