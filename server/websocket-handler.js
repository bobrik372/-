const WebSocket = require("ws")
const { v4: uuidv4 } = require("uuid")

console.log("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ WebSocketHandler –º–æ–¥—É–ª—è...")

class WebSocketHandler {
  constructor(wss, database, gameEngine) {
    console.log("üîå –°–æ–∑–¥–∞–Ω–∏–µ WebSocketHandler...")

    this.wss = wss
    this.db = database
    this.gameEngine = gameEngine
    this.users = new Map() // ws -> user data
    this.rooms = new Map() // roomId -> room data
    this.usersByNickname = new Map() // nickname -> ws

    this.setupWebSocket()

    console.log("‚úÖ WebSocketHandler —Å–æ–∑–¥–∞–Ω")
  }

  setupWebSocket() {
    console.log("üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞...")

    this.wss.on("connection", (ws, req) => {
      const clientIP = req.socket.remoteAddress || req.connection.remoteAddress
      const userAgent = req.headers["user-agent"]
      const origin = req.headers.origin

      console.log("üéâ –ù–û–í–û–ï WEBSOCKET –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï!")
      console.log("=" * 80)
      console.log(`üåê IP: ${clientIP}`)
      console.log(`üîß User-Agent: ${userAgent}`)
      console.log(`üè† Origin: ${origin}`)
      console.log(`üìä –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${this.wss.clients.size}`)
      console.log(`üïê –í—Ä–µ–º—è: ${new Date().toISOString()}`)
      console.log("=" * 80)

      ws.on("message", async (message) => {
        try {
          console.log(`üì® RAW MESSAGE –æ—Ç ${clientIP}:`, message.toString())
          const data = JSON.parse(message)
          console.log(`üì® PARSED MESSAGE –æ—Ç ${clientIP}:`, JSON.stringify(data, null, 2))
          await this.handleMessage(ws, data)
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${clientIP}:`, error)
          this.sendError(ws, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        }
      })

      ws.on("close", (code, reason) => {
        console.log(`üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –æ—Ç ${clientIP}`)
        console.log(`üìä –ö–æ–¥: ${code}, –ü—Ä–∏—á–∏–Ω–∞: ${reason}`)
        this.handleDisconnect(ws)
      })

      ws.on("error", (error) => {
        console.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞ –æ—Ç ${clientIP}:`, error)
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      const welcomeMessage = {
        type: "connected",
        message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mafia Game!",
        serverTime: new Date().toISOString(),
      }

      this.send(ws, welcomeMessage)
      console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${clientIP}`)
    })

    console.log("‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
  }

  async handleMessage(ws, data) {
    const user = this.users.get(ws)
    const userInfo = user ? `${user.nickname} (${user.isAuthenticated ? "auth" : "unauth"})` : "unknown"

    console.log(`üì® –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ${data.type} –æ—Ç ${userInfo}`)
    console.log(`üì¶ –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(data, null, 2))

    try {
      switch (data.type) {
        case "register":
          console.log(`üë§ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${data.nickname}`)
          await this.handleRegister(ws, data)
          break
        case "login":
          console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: ${data.nickname}`)
          await this.handleLogin(ws, data)
          break
        case "getRooms":
          console.log(`üè† –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –æ—Ç ${userInfo}`)
          await this.sendRoomsList(ws)
          break
        case "createRoom":
          console.log(`üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç ${userInfo}`)
          await this.createRoom(ws, data.room)
          break
        case "joinRoom":
          console.log(`üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId} –æ—Ç ${userInfo}`)
          await this.joinRoom(ws, data.roomId, data.password)
          break
        case "leaveRoom":
          console.log(`üö™ –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç ${userInfo}`)
          await this.leaveRoom(ws)
          break
        case "chatMessage":
          console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ—Ç ${userInfo}: ${data.message}`)
          await this.handleChatMessage(ws, data)
          break
        case "gameAction":
          console.log(`üéÆ –ò–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç ${userInfo}`)
          await this.handleGameAction(ws, data)
          break
        case "updateAvatar":
          console.log(`üé≠ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç ${userInfo}`)
          await this.updateAvatar(ws, data.avatar)
          break
        case "buyEffect":
          console.log(`üí∞ –ü–æ–∫—É–ø–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ ${data.effect} –æ—Ç ${userInfo}`)
          await this.buyEffect(ws, data.effect)
          break
        case "adminAction":
          console.log(`üëë –ê–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç ${userInfo}`)
          await this.handleAdminAction(ws, data)
          break
        case "ping":
          console.log(`üèì Ping –æ—Ç ${userInfo}`)
          this.send(ws, { type: "pong", timestamp: new Date().toISOString() })
          break
        case "getStats":
          console.log(`üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç ${userInfo}`)
          await this.sendLobbyStats(ws)
          break
        case "rejoinRoom":
          console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ ${data.roomId} –æ—Ç ${userInfo}`)
          await this.rejoinRoom(ws, data.roomId)
          break
        default:
          console.log("‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü –°–û–û–ë–©–ï–ù–ò–Ø:", data.type)
          console.log("–î–∞–Ω–Ω—ã–µ:", JSON.stringify(data, null, 2))
          this.sendError(ws, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${data.type}`)
      }
    } catch (error) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò ${data.type} –æ—Ç ${userInfo}:`, error)
      console.error("Stack trace:", error.stack)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + error.message)
    }
  }

  handleDisconnect(ws) {
    console.log("üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
  }

  send(ws, data) {
    if (ws.readyState === WebSocket.OPEN) {
      const message = JSON.stringify(data)
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${data.type} –∫–ª–∏–µ–Ω—Ç—É`)
      ws.send(message)
    } else {
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${data.type} –∫–ª–∏–µ–Ω—Ç—É —Å –∑–∞–∫—Ä—ã—Ç—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º`)
    }
  }

  sendError(ws, message) {
    console.log(`‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: ${message}`)
    this.send(ws, {
      type: "error",
      message: message,
    })
  }

  getStats() {
    return {
      connectedUsers: this.users.size,
      activeRooms: this.rooms.size,
    }
  }

  async handleRegister(ws, data) {
    try {
      const { nickname, password, avatar } = data

      if (!nickname || !password) {
        return this.sendError(ws, "–ù–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
      }

      if (nickname.length < 3 || nickname.length > 20) {
        return this.sendError(ws, "–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤")
      }

      if (password.length < 4) {
        return this.sendError(ws, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞")
      }

      const user = await this.db.createUser({ nickname, password, avatar })

      this.send(ws, {
        type: "registerSuccess",
        message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.",
      })

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${nickname} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error)
      this.sendError(ws, error.message)
    }
  }

  async handleLogin(ws, data) {
    try {
      const { nickname, password } = data

      if (!nickname || !password) {
        return this.sendError(ws, "–ù–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
      }

      const user = await this.db.loginUser(nickname, password)

      if (!user) {
        return this.sendError(ws, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
      }

      // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      const existingWs = this.usersByNickname.get(nickname)
      if (existingWs && existingWs !== ws) {
        console.log(`üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${nickname}`)
        this.send(existingWs, {
          type: "kicked",
          reason: "–í—Ö–æ–¥ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        })
        existingWs.close()
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.users.set(ws, {
        ...user,
        currentRoom: null,
        isAuthenticated: true,
      })
      this.usersByNickname.set(nickname, ws)

      const loginResponse = {
        type: "loginSuccess",
        user: {
          nickname: user.nickname,
          avatar: user.avatar,
          coins: user.coins,
          nickname_effects: user.nickname_effects,
          games_played: user.games_played,
          games_won: user.games_won,
          games_survived: user.games_survived,
          is_admin: user.is_admin,
        },
      }

      this.send(ws, loginResponse)

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${nickname}`)
      console.log(`üìä –í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: ${Array.from(this.users.values()).filter((u) => u.isAuthenticated).length}`)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
    }
  }

  async sendRoomsList(ws) {
    try {
      const rooms = await this.db.getRooms()
      const roomsList = []

      for (const room of rooms) {
        const roomData = this.rooms.get(room.id)
        roomsList.push({
          id: room.id,
          name: room.name,
          status: room.status,
          players: roomData ? roomData.players.length : 0,
          maxPlayers: room.max_players,
          creator: room.creator_nickname,
          hasPassword: room.hasPassword,
          createdAt: room.created_at,
        })
      }

      this.send(ws, {
        type: "rooms",
        rooms: roomsList,
      })

      console.log(`üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç: ${roomsList.length} –∫–æ–º–Ω–∞—Ç`)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:", error)
      this.sendError(ws, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç")
    }
  }

  // –î–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∏ –ø–æ–∫–∞:
  async createRoom(ws, roomData) {
    this.sendError(ws, "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
  }

  async joinRoom(ws, roomId, password) {
    this.sendError(ws, "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
  }

  async leaveRoom(ws) {
    this.sendError(ws, "–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
  }

  async handleChatMessage(ws, data) {
    this.sendError(ws, "–ß–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
  }

  async handleGameAction(ws, data) {
    this.sendError(ws, "–ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
  }

  async updateAvatar(ws, avatar) {
    this.sendError(ws, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
  }

  async buyEffect(ws, effect) {
    this.sendError(ws, "–ü–æ–∫—É–ø–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
  }

  async handleAdminAction(ws, data) {
    this.sendError(ws, "–ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
  }

  async sendLobbyStats(ws) {
    this.send(ws, {
      type: "stats",
      stats: {
        onlineUsers: this.users.size,
        activeRooms: this.rooms.size,
        activeGames: 0,
        uptime: process.uptime(),
      },
    })
  }

  async rejoinRoom(ws, roomId) {
    this.sendError(ws, "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
  }
}

console.log("‚úÖ WebSocketHandler –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
module.exports = WebSocketHandler
